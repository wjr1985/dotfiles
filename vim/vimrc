set nocompatible
let g:ale_set_balloons = 1

" VIM plugins are here
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

compiler ruby
syntax on
set termguicolors
set hlsearch
set number
set showmatch
set incsearch
set textwidth=0 nosmartindent tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set ruler
set wrap
set dir=/tmp//
set scrolloff=5
set ignorecase
set smartcase
set hidden
set signcolumn=yes
set undodir=~/.vim/undodir
set undofile
set undoreload=10000
set undolevels=10000
set mouse=a
set clipboard+=unnamedplus
set noshowcmd
set background=dark

let g:gruvbox_material_background = 'hard'
colorscheme gruvbox-material

augroup markdown
  au!
  au BufNewFile,BufRead *.m,*.markdown setlocal filetype=ghmarkdown
augroup END

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" vim-test
map <silent> <LocalLeader>rb :TestFile<CR>
map <silent> <LocalLeader>rf :TestNearest<CR>
map <silent> <LocalLeader>rc :TestNearest<CR>
map <silent> <LocalLeader>rl :TestLast<CR>

let test#strategy = "vimux"


" NERDTree
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <silent> <LocalLeader>nr :NERDTree<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>

" FZF
map <silent> <leader>ff :Files<CR>
map <silent> <leader>fg :GFiles<CR>
map <silent> <leader>fb :Buffers<CR>
map <silent> <leader>ft :Tags<CR>

map <silent> <C-p> :Files<CR>

" Ack
map <LocalLeader>aw :Ack '<C-R><C-W>'
noremap <Leader>a :Ack!<Space>

map <silent> <LocalLeader>cc :TComment<CR>

map <silent> <LocalLeader>pp :set paste!<CR>

lua << EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all"
  ensure_installed = { "ruby" },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  auto_install = true,

  -- List of parsers to ignore installing (for "all")
  ignore_install = { "javascript" },

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    disable = { "c", "rust" },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF

let g:airline_powerline_fonts=1
" Deoplete
" let g:deoplete#enable_at_startup = 1
"
" NCM2
" autocmd BufEnter * call ncm2#enable_for_buffer()
" set completeopt=noinsert,menuone,noselect

" DDC
lua << EEE
require'lspconfig'.solargraph.setup{}
EEE

call ddc#custom#patch_global('sources', ['nvim-lsp', 'treesitter'])
call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank']},
        \ })
call ddc#custom#patch_global('sourceOptions', {
      \ 'nvim-lsp': {
      \   'mark': 'lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
      \ })
call ddc#custom#patch_global('sourceOptions', {
      \ 'treesitter': {'mark': 'T'},
      \ })

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

call ddc#enable()
" END DDC


command! W w

" let g:LanguageClient_serverCommands = {
"   \ 'ruby': ['~/.asdf/shims/solargraph', 'stdio'],
"   \ }

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop'],
\}

